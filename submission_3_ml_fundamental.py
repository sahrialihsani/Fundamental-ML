# -*- coding: utf-8 -*-
"""Submission_3_ML_Fundamental.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K6TguU8t7FMXWsdrBLxai6lObm3B76ml

# Data Diri

Nama: Sahrial Ihsani Ishak

Asal: Bengkulu

# Code

Dataset: https://www.kaggle.com/jonathanoheix/face-expression-recognition-datasetinsects-recognition

Face expression Recognition with CNN
"""

!pip install -U -q kaggle
!mkdir -p ~/.kaggle

from google.colab import files
files.upload()

!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d jonathanoheix/face-expression-recognition-dataset
!ls

#Import Library
import zipfile
import os
import shutil
from sklearn.model_selection import train_test_split 
from keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from keras.layers import Dense,Input,Dropout,Flatten,Conv2D,MaxPooling2D
from keras.models import Model,Sequential
from keras.optimizers import Adam

# Ekstraksi pada file zip sebelumnya
local_zip = '/content/face-expression-recognition-dataset.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

train_folder= '/content/images/train'
os.listdir(train_folder)

validation_folder= '/content/images/validation'
os.listdir(validation_folder)

#Augmentasi and generate images
train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    vertical_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')
 
test_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    vertical_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

#Preprocessing data with generator
train_generator = train_datagen.flow_from_directory(
        train_folder,  
        target_size=(48, 48), 
        batch_size=64,
        color_mode='grayscale',
        class_mode='categorical',
        shuffle=True)
validation_generator = test_datagen.flow_from_directory(
        validation_folder, 
        target_size=(48, 48),  
        batch_size=64, 
        color_mode='grayscale',
        class_mode='categorical',
        shuffle=False)

#CNN Architecture Model sequentials (Maxpooling and convolutional layer), flatten to make single array

model = tf.keras.models.Sequential([
    #Layer1
    tf.keras.layers.Conv2D(64, (3,3), activation='relu',kernel_initializer='he_uniform', padding='same',input_shape=(48, 48, 1)),
    tf.keras.layers.MaxPooling2D(2, 2),
    #Layer2
    tf.keras.layers.Conv2D(128, (3,3), activation='relu',kernel_initializer='he_uniform', padding='same'),
    tf.keras.layers.MaxPooling2D(2,2),
    #Layer3
    tf.keras.layers.Conv2D(256, (3,3), activation='relu',kernel_initializer='he_uniform', padding='same'),
    tf.keras.layers.MaxPooling2D(2,2),
    #Layer4
    tf.keras.layers.Conv2D(512, (3,3), activation='relu',kernel_initializer='he_uniform', padding='same'),
    tf.keras.layers.MaxPooling2D(2,2),
    #Flatten
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    #Fully Connected Layer
    tf.keras.layers.Dense(1024, activation='relu',kernel_initializer='he_uniform'),
    tf.keras.layers.Dense(7, activation='softmax')
])

#Optimizer with adam
model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(learning_rate=1.0000e-04),
              metrics=['accuracy'])

#Callback untuk mencegah overfitting dengan menghentikan training, apabila telah terpenuhi
class reduceOverfitting(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') > 0.98):
      print("\nStopped! Akurasi sudah mencapai 98%")
      self.model.stop_training = True
stop = reduceOverfitting()

#see the model summary
model.summary()

#train our model with callback to reduce overfitting 
trainmodel = model.fit(
    train_generator,
    steps_per_epoch = 451, 
    epochs = 200,
    validation_data = validation_generator,
    validation_steps = 110, 
    verbose =2,       
      callbacks=[stop] 
)

#Accuracy Plot
plt.plot(trainmodel.history['accuracy'], label='Train Accuracy')
plt.plot(trainmodel.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy Plot')
plt.ylabel('Accuracy Value')
plt.xlabel('Epoch') 
plt.legend(loc="lower right")
plt.show()
#Loss Plot
plt.plot(trainmodel.history['loss'], label='Train Loss')
plt.plot(trainmodel.history['val_loss'], label='Validation Loss')
plt.title('Loss Plot')
plt.ylabel('Loss Value')
plt.xlabel('Epoch')
plt.legend(loc="upper right")
plt.show()

#Convert to tf lite
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

#save 
with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)